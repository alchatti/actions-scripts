""" 
Commit Message Validator Script v0.1

This script validates commit messages against a specified regex pattern based on
conventional commits to ensure they conform to the required format. The script is
designed for use in a GitHub Action workflow for pull requests.

Features:
- Reads commit messages from a file (`commit_messages.txt`) generated by `git log`.
- Validates each commit message against a predefined regex pattern.
- Outputs invalid commit messages to a file (`invalid_commits.txt`).
- Exits with a non-zero status code if any invalid commit messages are found.

Run the script:
- bash `python3 commit-messages.py`
- Gith Action task
    ```yml
    - name: Validate commit messages with Python
      run: python3 validate_commits.py
    ```

Requirements:
- Ensure Python 3 is installed and available in the environment.

Outputs:
- Creates `invalid_commits.txt` containing invalid commit messages, if any.
- Prints validation results to the console.

Exit Codes:
- 0: All commit messages are valid.
- 1: One or more invalid commit messages were found.
"""

# Script to vaildate 
import re

# Define the regex pattern
COMMIT_REGEX = re.compile(r"^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\([\w]+\))?(!)?: (.*)$")

# Read commit messages from the file
with open("commit_messages.txt", "r") as f:
    commit_messages = f.readlines()

invalid_commits = []

for line in commit_messages:
    commit_hash, commit_message = line.split(" ", 1)
    if not COMMIT_REGEX.match(commit_message.strip()):
        invalid_commits.append(f"{commit_hash}: {commit_message.strip()}")

# Save invalid commit messages to a file for GitHub Action annotations
with open("invalid_commits.txt", "w") as f:
    f.write("\n".join(invalid_commits))

# Exit with an error if invalid commits are found
if invalid_commits:
    print("Invalid commit messages found:")
    for commit in invalid_commits:
        print(commit)
    exit(1)
else:
    print("All commit messages are valid.")
    
